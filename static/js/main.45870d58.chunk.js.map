{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","kitten","id","name","username","email","CardList","kittens","map","key","SearchBox","placeholder","handelChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredKittens","filter","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2UAGaA,G,kBAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,OAAOC,GAAvC,4BACrB,oCAAUL,EAAMI,OAAOE,MACvB,wCAAcN,EAAMI,OAAOG,UAC3B,qCAAWP,EAAMI,OAAOI,UCJnBC,EAAW,SAAAT,GACpB,OACI,yBAAKC,UAAU,aACVD,EAAMU,QAAQC,KACX,SAAAP,GAAM,OACF,kBAAC,EAAD,CAAMQ,IAAKR,EAAOC,GAAID,OAAQA,SCNrCS,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,2BACId,UAAY,SACZe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCmCPG,E,YArCb,aAAe,IAAD,8BACZ,+CAcFH,aAAe,SAAAI,GAAC,OAAI,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbvD,EAAKC,MAAQ,CACXd,QAAS,GACTW,YAAa,IAJH,E,iFASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAEV,QAASmB,S,+BAKlC,IAAD,EAEwBC,KAAKN,MAA7Bd,EAFA,EAEAA,QAASW,EAFT,EAESA,YACVU,EAAkBrB,EAAQsB,QAC9B,SAAA5B,GAAM,OAAIA,EAAOE,KAAK2B,cAAcC,SAASb,EAAYY,kBAG3D,OACE,yBAAKhC,UAAU,OACb,iDACA,kBAAC,EAAD,CACEa,YAAY,iBACZC,aAAce,KAAKf,eAErB,kBAAC,EAAD,CAAUL,QAASqB,S,GAjCTI,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,kB","file":"static/js/main.45870d58.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = props => (\n    <div className='card-container'>\n        <img alt='kitten' src={`https://robohash.org/${props.kitten.id}?set=set4&size=180x180`} />\n        <p>Name: {props.kitten.name}</p>\n        <p>Username: {props.kitten.username}</p>\n        <p>Email: {props.kitten.email}</p>\n    </div>\n);","import React from 'react';\nimport './card-list.styles.css';\nimport {Card} from '../card/card.component';\n\nexport const CardList = props => {\n    return (\n        <div className=\"card-list\">\n            {props.kittens.map( \n                kitten => (\n                    <Card key={kitten.id} kitten={kitten} />\n                )\n            )}\n        </div>\n    );\n};","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeholder, handelChange}) => {\n    return (\n        <input \n            className = 'search'\n            type='search' \n            placeholder={placeholder} \n            onChange={handelChange} \n        />\n    );\n};","import React from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    this.state = {\n      kittens: [],\n      searchField: ''\n    };\n  }\n\n  // Life Cycle Method\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ kittens: users }));\n  }\n\n  handelChange = e => this.setState({searchField: e.target.value});\n\n  render() {\n\n    const {kittens, searchField} = this.state;\n    const filteredKittens = kittens.filter( \n      kitten => kitten.name.toLowerCase().includes(searchField.toLowerCase()) \n    );\n    \n    return (\n      <div className=\"App\">\n        <h1>Beautiful Kittens</h1>\n        <SearchBox \n          placeholder='Search Kittens' \n          handelChange={this.handelChange} \n        />\n        <CardList kittens={filteredKittens} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}